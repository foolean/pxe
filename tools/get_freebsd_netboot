#!/bin/sh
#
# FILENAME: get_freebsd_netboot
# AUTHOR:   Bennett Samowich <bennett@foolean.org>
# DATE:     2016-01-04
#
# DESCRIPTION:
#   Create FreeBSD netboot images.  This script will create a FreeBSD netboot
#   image.  At this time, it must be run on a FreeBSD system and will create
#   a netboot image for the same release and architecture as the build system.
#
#    Ref:
#    http://louwrentius.com/freebsd-101-unattended-install-over-pxe-http-no-nfs.html
#
# packages/
# `-- freebsd
#     |-- 10.1
#     |   `-- amd64
#     |       `-- mfsbsd-FreeBSD-10.1-amd64.img
#     |-- 10.2
#     |   `-- amd64
#     |       `-- mfsbsd-FreeBSD-10.2-amd64.img
#     `-- 9.3
#         `-- amd64
#             `-- mfsbsd-FreeBSD-9.3-amd64.img
#
###############################################################################
# Define some variables
ARCH_LIST="amd64";      # Placeholder for the list of architectures to download
RELEASE_LIST="";        # Placeholder for the list of releases to download
CUSTOM_RELEASE_LIST=0;  # Flag to denote that we have a custom release list
DEBUG=0;                # Turn on debugging output
ERROR=0;                # Error flag used during argument processing
VERBOSE=0;              # Turn on verbose output
PRUNE=0;                # Prune old releases
OSNAME="freebsd";       # Operating system name
URL="";                 # Placeholder for the URL to the installerconfig file
MFSBSD_FILE="mfsbsd-2.2.tar.gz"
MFSBSD_URL="https://github.com/mmatuska/mfsbsd/archive/2.2.tar.gz"

# Logging macro
LOGGER="/usr/bin/logger -it \"$(basename $0)\""

# debug - helper routine to print debugging messages
debug() {
  if [ "${DEBUG}" -eq 1 ]; then
      echo "debug: $*"
  fi
}

# error - helper routine to print error messages
error() {
    ${LOGGER} "error: $*"
    echo "error: $*"
}

# notice - helper routine to print informational messages
notice() {
  ${LOGGER} "notice: $*"
  if [ "${VERBOSE}" -eq 1 ]; then
    echo "notice: $*"
  fi
}

# usage - how to use this script
usage() {
    echo "Usage: $0 [ OPTIONS ]"
    echo ""
    echo "Where:"
    echo "  -a [ ARCH ]     Architecture to download netboot files for"
    echo "  -d              Print debugging output (includes -v too)"
    echo "  -h              Print this message"
    echo "  -r [ RELEASE ]  Operating sytem release to download"
    echo "  -u [ URL ]      URL to the installerconfig file"
    echo "                  (the macros %RELEASE% and %ARCH% may be used)"
    echo "  -v              Print more verbose output"
    exit 1
}

# Parse command-line arguments
while getopts "a:dhr:u:v" OPTION
do
    case $OPTION in
        a)
            ARCH_LIST=$(echo $OPTARG | tr '[:upper:]' '[:lower:]');;
        d)
            DEBUG=1
            VERBOSE=1
            PROGRESS="--progress"
            ;;
        r)
            RELEASE_LIST=$(echo $OPTARG | tr '[:upper:]' '[:lower:]')
            CUSTOM_RELEASE_LIST=1
            ;;
        u)
            URL=$OPTARG
            ;;
        v)
            VERBOSE=1
            ;;
        ?)
            usage;;
    esac
done

# Make sure we have what we need
if [ "${ARCH_LIST}" == "" ]; then
    error "Must specify an architecture type (-a)"
    ERROR=1
fi
if [ "${URL}" == "" ]
then
    error "Must specify url to the installerconfig file (-u)"
    ERROR=1
fi
if [ "${RELEASE_LIST}" == "" ]; then
    RELEASE_URL_BASE="http://ftp.freebsd.org/pub/FreeBSD/releases/amd64"
    RELEASE_LIST=$(fetch -q -o - "${RELEASE_URL_BASE}" | \
                   egrep "[0-9]-RELEASE"               | \
                   sed -e 's/.*href="//' -e 's/\-.*//' | \
                   sort -un | tr '\n' ' ')
fi
if [ ${ERROR} -eq 1 ]; then
    usage
    exit 1;     # Should never get here
fi

# Debugging output
debug "ARCH          = ${ARCH}" 
debug "RELEASE_LIST  = ${RELEASE_LIST}"

# Create and change into a working directory
ROOT_DIR="$(readlink -f .)/mfsbsd.work"
if [ ! -d "${ROOT_DIR}" ]
then
    debug "Creating '${ROOT_DIR}'"
    mkdir "${ROOT_DIR}"
fi
cd "${ROOT_DIR}"

# Download mfsbsd
if [ ! -f "${ROOT_DIR}/${MFSBSD_FILE}" ]
then
    debug "Downloading ${MFSBSD_FILE}"
    fetch --no-verify-peer -o "${MFSBSD_FILE}" "${MFSBSD_URL}"
fi

# Unpack mfsbsd
if [ ! -d "${ROOT_DIR}/mfsbsd" ]
then
    debug "Creating '${ROOT_DIR}/mfsbsd'"
    mkdir "${ROOT_DIR}/mfsbsd"
fi
debug "Unpacking ${MFSBSD_FILE} into ${ROOT_DIR}/mfsbsd"
tar xzf "${MFSBSD_FILE}" --strip-components 1 -C "${ROOT_DIR}/mfsbsd"

# ... mfsbsd looks for pkg-static in the tools directory. (*shrug*)
if [ ! -L "${ROOT_DIR}/mfsbsd/tools/pkg-static" ]
then
    debug "Symlinking pkg-static into tools"
    ln -s /usr/local/sbin/pkg-static "${ROOT_DIR}/mfsbsd/tools/pkg-static"
fi

# set IMAGE_PREFIX so we get sensible image names
export IMAGE_PREFIX=mfsbsd-FreeBSD

# mfsbsd expects the ISO to be mounted on /cdrom
if [ ! -d "/cdrom" ]
then
    debug "Creating /cdrom"
    mkdir /cdrom/
fi

for ARCH in ${ARCH_LIST}
do

    # Get the release list for this architecture if we don't have one
    if [ "${RELEASE_LIST}" == "" ]; then
        RELEASE_URL_BASE="http://ftp.freebsd.org/pub/FreeBSD/releases/${ARCH}"
        RELEASE_LIST=$(fetch -q -o - "${RELEASE_URL_BASE}" | \
                       egrep "[0-9]-RELEASE"               | \
                       sed -e 's/.*href="//' -e 's/\-.*//' | \
                       sort -u | tr '\n' ' ')
    fi

    for RELEASE in ${RELEASE_LIST}
    do
        # FreeBSD 9.3 isn't working.  The basic principles are correct and an
        # image of the correct size is created.  It fails to boot, complaining
        # that /bin/sh can't be found.  Since we're already at release 10.2 we
        # will skip processing release 9 until it can be figured out.
        if [ $(echo "${RELEASE}" | cut -f1 -d.) -eq 9 ]
        then
            echo "Skipping release ${RELEASE}"
            continue
        fi
    	debug "Creating netboot image for ${RELEASE}"

        # Assemble the URL to the bsdinstall(8) installerconfig file to download
        # ... Neuter embedded variables and replace macros with their values
        installerconfig=$(echo "${URL}" | sed -e 's/\$/_/g')
        installerconfig=$(echo "${installerconfig}" | sed -e "s/%RELEASE%/${RELEASE}/g")
        installerconfig=$(echo "${installerconfig}" | sed -e "s/%ARCH%/${ARCH}/g")

        # Download and mountthe FreeBSD ISO
        ISO="FreeBSD-${RELEASE}-RELEASE-${ARCH}-disc1.iso"
        if [ ! -f "${ISO}" ]
        then
            debug "Downloading '${ISO}'"
            FREEBSD_ISO_URL="http://ftp.freebsd.org/pub/FreeBSD/releases/ISO-IMAGES"
            fetch -o "${ROOT_DIR}/${ISO}" \
                "${FREEBSD_ISO_URL}/${RELEASE}/${ISO}"
        fi
        MD=$(mdconfig -a -t vnode -f "${ROOT_DIR}/${ISO}")
        debug "Mounting '${ISO}' (/dev/${MD}) to /cdrom"
        mount_cd9660 "/dev/${MD}" /cdrom/

        # Setup rc.local
        cd "${ROOT_DIR}/mfsbsd"
        debug "Creating '${ROOT_DIR}/mfsbsd/conf/rc.local'"
        cat << EOF > "${ROOT_DIR}/mfsbsd/conf/rc.local"
#!/bin/sh

# Download the bsdinstall 'installerconfig' file
installerconfig="${installerconfig}"
fetch "\${installerconfig}" -o /etc/installerconfig

# Create the installer start script
cat << EOF_START_SCRIPT > /tmp/start.sh
#!/bin/csh
setenv DISTRIBUTIONS "kernel.txz base.txz"
setenv BSDINSTALL_DISTDIR /tmp
setenv BSDINSTALL_DISTSITE ftp://ftp.freebsd.org/pub/FreeBSD/releases/${ARCH}/${RELEASE}-RELEASE/
setenv installerconfig "\${installerconfig}"

bsdinstall distfetch 
bsdinstall script /etc/installerconfig
EOF_START_SCRIPT

# ... and run it
chmod 700 /tmp/start.sh
/tmp/start.sh

# ... and done
exit 0
EOF

        # Build the PXE bootable image
        debug "Building the image"
        export RELEASE
        if [ $(echo "${RELEASE}" | cut -f1 -d.) -eq 9 ]
        then
            # FreeBSD needs a different prunelist to get under 45M
            make PRUNELIST=tools/prunelist.9
        else
            make
        fi

        # Unmount and release the ISO
        debug "Unmounting '${ISO}' (${MD}) from /cdrom"
        umount /cdrom/
        mdconfig -d -u "${MD}"

        # Move the resulting image to the package directory
        debug "Moving resulting image"
        if [ ! -d "${ROOT_DIR}/packages/freebsd/${RELEASE}/${ARCH}" ]
        then
            debug "Creating '${ROOT_DIR}/packages/freebsd/${RELEASE}/${ARCH}'"
            mkdir -p "${ROOT_DIR}/packages/freebsd/${RELEASE}/${ARCH}"
        fi
        mv "${IMAGE_PREFIX}-${RELEASE}-${ARCH}.img" \
           "${ROOT_DIR}/packages/freebsd/${RELEASE}/${ARCH}"

        # Clean up
        debug "Cleaning up"
        make clean
        cd "${ROOT_DIR}"
    done
done

