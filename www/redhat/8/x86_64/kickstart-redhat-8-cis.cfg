#
# FILENAME:     kickstart-redhat-8-cis.cfg
# AUTHOR:       Bennett Samowich <bsamowich@foolean.org>
# DATE:         2015-10-30
#
# DESCRIPTION:
#   Preseed configuration file for RedHat 8
#
#   This kickstart file will install a base RedHat system using a partitioning
#   layout based on the number and size of the disks.
#
#   PXE Init Arguments
#   ==================
#
#   raidtype    - The RAID type to build (e.g. none, 0, 1, 5, 6, 10)
#
#       If raidtype is set to 'none' (the default) then the
#       first disk will be formatted as a non-RAID, single disk.
#
#       NOTE: The /boot partition will always be RAID-1, unless single disk
#             is selected.  The number of disks and spares used in the /boot
#             partition will follow the 'raiddisks' and 'raidspares' options.
#
#   raiddisks   - The number of active disks to include in the volume
#
#   raidspares  - The number of spare disks to include in the volume
#
#   The installer itself will throw the error If the requested number of
#   disks, spares, and raid type can not be fullfilled.
#
#   NOTE: RedHat 8 uses biosdevname which means that eth0 will instead be
#         something like enp1s0f0.  If you want to restore "normal" ethX
#         behavior then add biosdevname=0 net.ifnames=0 to the APPEND line.
#
#   Partition Sizing (smallest disk < 40G)
#   =======================================
#   Swap            384(MB)
#   /               800(MB)
#   /boot           512(MB)
#   /home           32(MB)      [ nodev ]
#   /var            512(MB)
#   /usr            1280(MB)
#   /usr/local      256(MB)
#   /tmp            256(MB)     [ nodev, nosuid, noexec ]
#   /var/tmp        256(MB)     [ nodev, nosuid, noexec ]
#   /var/log        1024(MB)
#   /var/log/audit  1024(MB)
#
#   Partition Sizing (smallest disk >= 40G)
#   =======================================
#   Swap            4096(MB)
#   /               896(MB)
#   /boot           512(MB)
#   /home           4096(MB)    [ nodev ]
#   /var            7168(MB)
#   /usr            4096(MB)
#   /usr/local      512(MB)
#   /tmp            4096(MB)    [ nodev, nosuid, noexec ]
#   /var/tmp        4096(MB)    [ nodev, nosuid, noexec ]
#   /var/log        8192(MB)
#   /var/log/audit  8192(MB)
#
#   Initial Passwords
#   =================
#
#   The initial root and boot menu password is 'changeme'.
#
#   You will be prompted to change the root password at first login.
#
#   CIS Benchmark Compliance
#   ========================
#
#   This kickstart attempts to create a CIS compliant system.  The settings
#   are based on the RedHat 8 Benchmark v1.0.0 document dated 2019-09-30

#   [ CIS Benchmark Download ]
#   https://benchmarks.cisecurity.org/downloads/show-single/?file=redhat8.100
#
#   A CIS-CAT audit reports the following failures.
#
#       1.7.1.4 Ensure the SELinux state is enforcing
#
#       Kickstart sets selinux to permissive where the CIS audit tool
#       looks for enforcing.
#
#       4.1.9 Ensure discretionary access control permission modification
#       events are collected.
#
#       The test described in the benchmark passes but the CIS-CAT tool fails.
#
#       4.2.1.5 Ensure rsyslog is configured to send logs to a remote host
#
#       The kickstart does not set the remote host becaue the exact remote
#       loghost will be specific to the organization.
#
#       6.2.14 Ensure all groups in /etc/passwd exist in /etc/group
#
#       The test described in the benchmark passes but the CIS-CAT tool fails.
#
#       6.2.20 Ensure all users' home directories exist
#
#       The test described in the benchmark passes but the CIS-CAT tool fails.
#
##############################################################################

# Set the language to US english
lang en_US.UTF-8

# Sets system keyboard type
keyboard us

# Set the time zone to EST
timezone --utc America/New_York

# Set the default root password.  This can also be encrypted.
# To pre-encrypt the password use the openssl command:
#     openssl passwd -1 <PASSWORD>
#rootpw --iscrypted $1$CfRZs.3k$n7vrqs23hSkcQximEHgqg/
rootpw changeme

# Install in text mode
text

# Set the boot loader options.
# CIS: 1.5. Ensure bootloader password is set
# NOTE: The grub2 password chould be changed after build.  To do so,
#       modify /etc/grub.d/01_users.  A new password hash can be created
#       created by running grub2-mkpasswd-pbkdf2 and then running
#       grub2-mkconfig > /etc/grub2.cfg.
bootloader --location=mbr --append hdb=ide-scsi --password=changeme

# Install Linux, don't upgrade
install

# Skip the X Windows configuration
skipx

# Configure network settings
# Examples:
#   DHCP:   network --device=eth0 --bootproto=dhcp --noipv6
#   STATIC: network --device eth0 --bootproto static --ip <IP> \
#                   --netmask <NETMASK> --gateway <GATEWAY>    \
#                   --nameserver <DNS1>,<DNS2>,<DNS3> --noipv6 \
#                   --hostname <HOSTNAME>
network --bootproto=dhcp

# Install from our URL
url --url http://replace-with-your-url-here

# Configure how passwords are stored
authconfig --enableshadow --passalgo=sha512

# Clear all of the existing partitions from the disk adn make new ones
# (Note: This layout requires a minimum of a 5GB drive)
# The layout is comprised of recommendations from various security
# related resources.
zerombr
clearpart --all --initlabel

# The partitioning layout will be assembled in the %pre section
%include /tmp/partitions.ks

# SELinux
# Options are 'enforcing', 'permissive'
# CIS: 1.7.1.2 Ensure SELinux is not disabled in bootloader configuration (OK: default is compliant)
# CIS: 1.7.1.3 Ensure SELinux policy is configured (OK: default is compliant)
# CIS: 1.7.1.4 Ensure SELinux state is enforcing (NOT COMPLIANT: starting in permissive)
# CIS: 1.7.1.5 Ensure no unconfined services exist (OK: default is compliant)
selinux --permissive

# Services that should be enabled or disabled
# CIS: 5.1.2 Activate the rsyslog Service
# CIS: 3.3 Disable Avahi Server
# CIS: 3.4 Disable Print Server - CUPS
# CIS: 3.8 Disable NFS and RPC
# CIS: 4.7 Enable firewalld
# CIS: 5.2.2 Enable auditd Service
# CIS: 6.1.2 Enable crond Daemon
services --enabled auditd,crond,firewalld,rsyslog --disabled avahi-daemon,cups,nfslock,rpcgssd,rpcbind,rpcidmapd,rpcsvcgssd

# Reboot the machine when done.
# (It's up to you to remove the boot media)
reboot

# Packages that we will start with.
# CIS: 1.3.1 Ensure sudo is installed
# CIS: 5.1.1 Install the rsyslog package
# CIS: 1.4.1   Ensure AIDE is installed
# CIS: 1.7.1.1 Ensure SELinux is installed
# CIS: 2.2.1.1 Ensure time synchronization is in use
# CIS: 6.1.1 Enable anacron Daemon
%packages
@core --nodefaults
aide
audit
chrony
git
libselinux
postfix
redhat-lsb-core
rsyslog
sudo
#####tcp_wrappers
# Packages not to install
# CIS: 1.7.1.6 Ensure SETroubleshoot is not installed
# CIS: 1.7.1.7 Ensure the MCS Translation Service (mcstrans) is not installed
# CIS: 2.1.1   Ensure xinetd is not installed
# CIS: 2.2.2   Ensure the X Window System is not installed
# CIS: 2.2.3   Ensure rsync service is not enabled
#
# CIS: 2.1.1 Remove telnet-server
# CIS: 2.1.2 Remove telnet Clients
# CIS: 2.1.3 Remove rsh-server
# CIS: 2.1.4 Remove rsh
# CIS: 2.1.5 Remove NIS Client
# CIS: 2.1.6 Remove NIS Server
# CIS: 2.1.7 Remove tftp
# CIS: 2.1.8 Remove tftp-server
# CIS: 2.1.9 Remove talk
# CIS: 2.1.10 Remove talk-server
# CIS: 3.5 Remove DHCP Server
# CIS: 3.7 Remove LDAP
# CIS: 3.9 Remove DNS Server
# CIS: 3.10 Remove FTP Server
# CIS: 3.11 Remove HTTP Server
# CIS: 3.12 Remove Dovecot (IMAP and POP3 services)
# CIS: 3.13 Remove Samba
# CIS: 3.14 Remove HTTP Proxy Server
# CIS: 3.15 Remove SNMP Server
#-cups
#-cups-libs
#-dracut-network
#-NetworkManager*
#-openldap*
#-postfix
-aic94xx-firmware*
-aic94xx-firmware*
-alsa-firmware*
-alsa-plugins*
-alsa-tools*
-alsa-ucm*
-alsa-utils*
-bind
-biosdevname
-btrfs-progs*
-dhcp
-dovecot
-httpd
-iprutils
-ivtv*
-iwl*firmware
-libertas*
-mcstrans
-net-snmp
-openssh-server
-plymouth*
-rsh
-rsh-server
-rsyncd
-samba
-setroubleshoot
-squid
-talk
-talk-server
-telnet
-telnet-server
-tftp
-tftp-server
-trousers
-vsfstpd
-xorg-x11*
-xinetd
-ypbind
-ypserv
%end

# The following commands are executed at the beginning of the installation
# process by /bin/sh.
%pre
#!/bin/sh

# Get any kernel options and convert them to environment variables
set -- $(cat /proc/cmdline | sed -e 's/net\.ifnames/net_ifnames/')
for I in $*; do case "$I" in *=*) eval $I;; esac; done

# Create a file that contains the kickstart URL as well as git,
# sha1, and sha256 hashes into the resulting image.  The purpose
# of which is to provide the ability to show when and how the
# system was built.
cat << EOF > /tmp/tag-install.sh
#!/bin/sh

while [ ! -d /mnt/sysimage/etc ]
do
    sleep 5
done
(   echo "date:    $(date)"
    echo ""
    echo "ks:      ${ks}"
    echo "git-sha: $((printf \"blob $(ls -l /run/install/ks.cfg | awk '{print $5}')\0\"; cat /run/install/ks.cfg) | sha1sum | awk '{print $1}')"
    echo "sha1:    $(sha1sum /run/install/ks.cfg | awk '{print $1}')"
    echo "sha256:  $(sha256sum /run/install/ks.cfg | awk '{print $1}')"
) > /mnt/sysimage/etc/build-info
chmod 0000 /mnt/sysimage/etc/build-info
EOF
chmod 700 /tmp/tag-install.sh
/bin/sh /tmp/tag-install.sh > /dev/null 2>&1 < /dev/null &

# Create a repo entry from the kickstart URL
cat << EOF > /tmp/configure-repo.sh
#!/bin/sh

while [ ! -d /mnt/sysimage/etc/yum.repos.d ]
do
    sleep 5
done
KS_URL="$(grep "^url" /run/install/ks.cfg | cut -f3- -d\ )"
REPO_FILE="/mnt/sysimage/etc/yum.repos.d/rhel-kickstart-url.repo"
echo "[kickstart-url-appstream]" > "\${REPO_FILE}"
echo "name=Red Hat Enterprise Linux 8 Kickstart URL - AppStream" >> "\${REPO_FILE}"
echo "baseurl=\${KS_URL}AppStream/" >> "\${REPO_FILE}"
echo "enabled=1" >> "\${REPO_FILE}"
echo "" >> "\${REPO_FILE}"
echo "[kickstart-url-baseos]" >> "\${REPO_FILE}"
echo "name=Red Hat Enterprise Linux 8 Kickstart URL - BaseOS" >> "\${REPO_FILE}"
echo "baseurl=\${KS_URL}BaseOS/" >> "\${REPO_FILE}"
echo "enabled=1" >> "\${REPO_FILE}"
EOF
/bin/sh /tmp/configure-repo.sh > /dev/null 2>&1 < /dev/null &

# The RedHat 8 installer based script 'list-harddrives' also shows any
# pre-existing linux-raid partitions as part of the disk list.  It is
# for that reason that we resort to parsing the output of lsblk.  The
# lsblk command doesn't exist in RedHat 6 and list-harddrives behaves
# correctly so we'll only actually use lsblk when it exists. 
#
# Note: The lsblk comand in RedHat 8 also shows fd0 and a ramdisk for
#       swap.  We'll still use lsblk to identify disks but also need
#       to weed out this extra cruft.
if [ -f "/usr/bin/lsblk" ]; then
    LIST_HARDDRIVES="lsblk | grep disk | grep -v \"zram\" | grep -v \"^fd\" | awk '{print \$1}'"
else
    LIST_HARDDRIVES="list-harddrives"
fi

# Default partition sizes
SWAP_SZ=4096
LV01_SZ=896
LV02_SZ=4096
LV03_SZ=7168
LV04_SZ=4096
LV05_SZ=512
LV06_SZ=4096
LV07_SZ=4096
LV08_SZ=8192
LV09_SZ=8192

# Get the smallest disk size
SMALLEST_DISK=$(                      \
    ( eval ${LIST_HARDDRIVES}       | \
        awk '{print $1}'            | \
        while read DISK; do           \
            fdisk -l "/dev/${DISK}" | \
              grep "^Disk .* bytes" | \
              cut -f5 -d\ ;
        done                          \
    ) | sort -un | head -n1           \
);

# Use a smaller layout if the disk is smaller than 40G
if [ ${SMALLEST_DISK} -lt 40000000000 ]; then
    SWAP_SZ=384
    LV01_SZ=800
    LV02_SZ=32
    LV03_SZ=512
    LV04_SZ=1280
    LV05_SZ=256
    LV06_SZ=256
    LV07_SZ=256
    LV08_SZ=1024
    LV09_SZ=1024
fi

# A few more variables
DISKS=$(eval ${LIST_HARDDRIVES} | wc -l);
RAID_TYPE="none"
RAID_DISKS="${DISKS}"
RAID_SPARES="0";

if [ "${raidtype}" == "none" ]; then
    raiddisks=1;
fi
if [ "${raidtype}" != "" ]; then
    RAID_TYPE="${raidtype}"
fi
if [ "${raiddisks}" != "" ]; then
    RAID_DISKS="${raiddisks}"
fi
if [ "${raidspares}" != "" ]; then
    RAID_SPARES="${raidspares}"
fi
RAID_TOTAL=$(( ${RAID_DISKS} + ${RAID_SPARES} ))

# Build our partitioning layout
if [ "${RAID_TOTAL}" == "1" ]; then
    DISK=$(eval ${LIST_HARDDRIVES} | awk '{print $1}' | head -n ${RAID_TOTAL})
    cat << EOF >> /tmp/partitions.ks
part /boot --fstype=ext4 --size=512 --ondisk ${DISK}
part pv.01 --grow        --size=1   --ondisk ${DISK}
EOF
else
    INDEX=1
    RAID_LIST0=""
    RAID_LIST1=""
    for DISK in $(eval ${LIST_HARDDRIVES} | awk '{print $1}' | head -n ${RAID_TOTAL}); do
        RAID_LIST0="${RAID_LIST0} raid.0${INDEX}"
        RAID_LIST1="${RAID_LIST1} raid.1${INDEX}"
        cat << EOF >> /tmp/partitions.ks
part raid.0${INDEX} --size=512        --ondisk ${DISK}
part raid.1${INDEX} --size=1   --grow --ondisk ${DISK}
EOF
        INDEX=$(( ${INDEX} + 1 ))
    done
    cat << EOF >> /tmp/partitions.ks
raid /boot --fstype=ext4 --level=RAID1 --spares=${RAID_SPARES} --device=md0 ${RAID_LIST0}
raid pv.01               --level=RAID${RAID_TYPE} --spares=${RAID_SPARES} --device=md1 ${RAID_LIST1}
EOF
fi

cat << EOF >> /tmp/partitions.ks

# CIS: 1.1.2  Ensure /tmp is configured
# CIS: 1.1.3  Ensure nodev option set on /tmp partition
# CIS: 1.1.4  Ensure nosuid option set on /tmp partition
# CIS: 1.1.5  Ensure noexec option set on /tmp partition
# CIS: 1.1.6  Ensure separate partition exists for /var
# CIS: 1.1.7  Ensure separate partition exists for /var/tmp
# CIS: 1.1.8  Ensure nodev option set on /var/tmp partition
# CIS: 1.1.9  Ensure nosuid option set on /var/tmp partition
# CIS: 1.1.10 Ensure noexec option set on /var/tmp partition
# CIS: 1.1.11 Ensure separate partition exists for /var/log
# CIS: 1.1.12 Ensure separate partition exists for /var/log/audit
# CIS: 1.1.13 Ensure separate partition exists for /home
# CIS: 1.1.14 Ensure nodev option set on /home partition
# CIS: 1.1.18 Ensure nodev option set on removable media partitions (no removable media in fstab post-install)
# CIS: 1.1.19 Ensure noexec option set on removable media partitions (no removable media in fstab post-install)
# CIS: 1.1.20 Ensure nosuid option set on removable media partitions (no removable media in fstab post-install)
# CIS: 1.1.21 Ensure sticky bit is set on all world-writable directories (OK: default is compliant)
volgroup vg0 pv.01
logvol swap           --fstype=ext4 --vgname=vg0 --size=${SWAP_SZ} --name=swap
logvol /              --fstype=ext4 --vgname=vg0 --size=${LV01_SZ} --name=lv01
logvol /home          --fstype=ext4 --vgname=vg0 --size=${LV02_SZ} --name=lv02 --fsoptions="nodev"
logvol /var           --fstype=ext4 --vgname=vg0 --size=${LV03_SZ} --name=lv03
logvol /usr           --fstype=ext4 --vgname=vg0 --size=${LV04_SZ} --name=lv04
logvol /usr/local     --fstype=ext4 --vgname=vg0 --size=${LV05_SZ} --name=lv05
logvol /tmp           --fstype=ext4 --vgname=vg0 --size=${LV06_SZ} --name=lv06 --fsoptions="nodev,nosuid,noexec"
logvol /var/tmp       --fstype=ext4 --vgname=vg0 --size=${LV07_SZ} --name=lv07 --fsoptions="nodev,nosuid,noexec"
logvol /var/log       --fstype=ext4 --vgname=vg0 --size=${LV08_SZ} --name=lv08
logvol /var/log/audit --fstype=ext4 --vgname=vg0 --size=${LV09_SZ} --name=lv09
EOF
%end

# The following commands are executed at the end of the installation
# process by /bin/sh while you are chrooted into the new system.  This
# allows you to add user accounts, turn on or off autobooted software,
# etc..
%post

# Standardize our logging format
LOGGER="logger -i -p local1.info -t 'kickstart'"

# Proxy to use for YUM
YUMPROXYSVR=""
YUMPROXYUSER=""
YUMPROXYPASS=""

# Turn off services that we don't want running
# CIS: 1.1.22 Disable Automounting
# CIS: 2.1.12 Disable chargen-dgram
# CIS: 2.1.13 Disable chargen-stream
# CIS: 2.1.14 Disable daytime-dgram
# CIS: 2.1.15 Disable daytime-stream
# CIS: 2.1.16 Disable echo-dgram
# CIS: 2.1.17 Disable echo-stream
# CIS: 2.1.18 Disable tcpmux-server
SERVICES="
    acpidatd
    autofs
    chargen-dgram
    chargen-stream
    cpuspeed
    cups
    daytime-dgram
    daytime-stream
    echo-dgram
    echo-stream
    gpm
    haldaemon
    isdn
    messagebus
    netfs
    nfslock
    openibd
    pcmcia
    portmap
    rawdevices
	rhnsd
    rpcgssd
    rpcidmapd
    tcpmux-server
    xinetd
"
for SERVICE in ${SERVICES}
do
   echo "disabling ${SERVICE}" | ${LOGGER}
   systemctl --now disable ${SERVICE}
done

# Import GPG keys
# CIS: 1.2.3 Ensure GPG keys are configured
# CIS: 1.2.4 Ensure gpgcheck is globally activated (active by default)
rpm --import `find /usr/share/doc -name '*GPG*' -type f | grep -v -i redhat | \
        head -1` 2> /dev/null
rpm --import `find /usr/share/doc -name '*GPG*' -type f | grep -i redhat | \
        head -1` 2> /dev/null
rpm --import `find /etc/pki/rpm-gpg -name '*GPG*' -type f` 2>/dev/null

# CIS: 1.2.5 Ensure package manager repositories are configured (default)

# Set up the EPEL repository
rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm

# Set up the Puppet v6 repository
rpm -Uvh https://yum.puppetlabs.com/puppet6-release-el-8.noarch.rpm

# Install msmtp
yum install -y msmtp

# Install puppet
yum install -y puppet

# Install etckeeper
yum install -y etckeeper
if [ -f /etc/etckeeper/etckeeper.conf ]
then
    cp /etc/etckeeper/etckeeper.conf /etc/etckeeper/etckeeper.conf.orig
    ( cat /etc/etckeeper/etckeeper.conf | \
      sed -e 's/VCS=\"hg\"/#VCS=\"hg\"/'  \
          -e 's/VCS=\"#git\"/VCS=\"git\"/'
    ) > /etc/etckeeper/etckeeper.conf.new
    mv /etc/etckeeper/etckeeper.conf.new /etc/etckeeper/etckeeper.conf
    etckeeper init
    etckeeper commit "Initial commit of base system"
fi

# Configure mstmp
cp /usr/share/doc/msmtp/msmtprc-system.example /etc/msmtprc
etckeeper commit "Initial sample msmtp configuration"

# Install tcp_wrappers
yum install -y tcp_wrappers
etckeeper commit "Install tcp_wrappers"

# Remove duplicate kernels
for i in kernel kernel-smp
do
   NONCE=`rpm -q $i 2> /dev/null | wc -l | awk '{print $1}'`
   export CNT=`echo " 0${NONCE} + 0" | bc`

   echo "cnt: $CNT pre while $NONCE " | ${LOGGER}
   sleep 5

   while [ $CNT -gt 1 ]
   do
      NONCE=`rpm -q $i --last | awk '{print $1}' | tail -1`

      echo "kernel: $NONCE " | ${LOGGER}
      sleep 5

      rpm -e $NONCE  && echo "  removed extra $NONCE kernel" | ${LOGGER}

      NONCE=`rpm -q $i 2> /dev/null | wc -l | awk '{print $1}'`
      export CNT=`echo " 0${NONCE} + 0" | bc`

      echo "cnt: $CNT in while $NONCE " | ${LOGGER}
      sleep 5
   done
done
etckeeper commit "Remove duplicate kernels"

# Attempt package updates
# CIS: 1.9 Ensure updates, patches, and additional security software are installed
echo "Looking for updates via 'yum'" | ${LOGGER}
yum -d 0 -e 0 -t -y update
etckeeper commit "Package updates"

# Free up the yum cached files
echo "Cleaning up yum cached files" | ${LOGGER}
yum -y clean all

# Force root password change
echo "Forcing root password change" | ${LOGGER}
chage -d 0 root
etckeeper commit "Force root to change password"

# Set the initial Puppet configuration
cp /etc/puppet/puppet.conf /etc/puppet/puppet.conf.orig
cat << EOF > /etc/puppet/puppet.conf
[main]
logdir=/var/log/puppet
vardir=/var/lib/puppet
manifestdir=/var/lib/puppet/manifests
ssldir=/var/lib/puppet/ssl
rundir=/var/run/puppet
factpath=\$vardir/lib/facter
runinterval=315569260
server=puppet
ca_server=puppet
environment=production
summarize=true
show_diff = true
listen=false
EOF
etckeeper commit "Set basic puppet.conf"

# Set puppet's home directory
usermod -d /var/lib/puppet puppet
etckeeper commit "Fixing puppet's home directory"

#
# CIS Benchmark Configurations
#

# CIS: 1.1.1.1 Ensure mounting of cramfs filesystems is disabled
cat << EOF >> /etc/modprobe.d/CIS.conf

# CIS: 1.1.1.1 Ensure mounting of cramfs filesystems is disabled
install cramfs /bin/true
EOF
etckeeper commit "CIS: 1.1.1.1 Ensure mounting of cramfs filesystems is disabled"

# CIS: 1.1.1.2 Ensure mounting of vFAT filesystems is limited
cat << EOF >> /etc/modprobe.d/CIS.conf

# CIS: 1.1.1.2 Ensure mounting of vFAT filesystems is limited
install vfat /bin/true
EOF
etckeeper commit "CIS: 1.1.1.2 Ensure mounting of vFAT filesystems is limited"

# CIS: 1.1.1.3 Ensure mounting of squashfs filesytems is disabled
cat << EOF >> /etc/modprobe.d/CIS.conf

# CIS: 1.1.1.3 Ensure mounting of squashfs filesytems is disabled
install squashfs /bin/true
EOF
etckeeper commit "CIS: 1.1.1.3 Ensure mounting of squashfs filesytems is disabled"

# CIS: 1.1.1.4 Ensure mounting of udf filesystems is disabled
cat << EOF >> /etc/modprobe.d/CIS.conf

# CIS: 1.1.1.4 Ensure mounting of udf filesystems is disabled
install udf /bin/true
EOF
etckeeper commit "CIS: 1.1.1.4 Ensure mounting of udf filesystems is disabled"

# CIS: 1.1.23 Disable USB storage
cat << EOF >> /etc/modprobe.d/CIS.conf

# CIS: 1.1.23 Disable USB storage
install usb-storage /bin/true
EOF
etckeeper commit "CIS: 1.1.23 Disable USB storage"

# CIS: 1.1.19 Disable Mounting of freevxfs Filesystems
cat << EOF >> /etc/modprobe.d/CIS.conf

# CIS: 1.1.19 Disable Mounting of freevxfs Filesystems
install freevxfs /bin/true
EOF
etckeeper commit "CIS: 1.1.19 Disable Mounting of freevxfs Filesystems"

# CIS: 1.1.20 Disable Mounting of jffs2 Filesystems
cat << EOF >> /etc/modprobe.d/CIS.conf

# CIS: 1.1.20 Disable Mounting of jffs2 Filesystems
install jffs2 /bin/true
EOF
etckeeper commit "CIS: 1.1.20 Disable Mounting of jffs2 Filesystems"

# CIS: 1.1.21 Disable Mounting of hfs Filesystems
cat << EOF >> /etc/modprobe.d/CIS.conf

# CIS: 1.1.21 Disable Mounting of hfs Filesystems
install hfs /bin/true
EOF
etckeeper commit "CIS: 1.1.21 Disable Mounting of hfs Filesystems"

# CIS: 1.1.22 Disable Mounting of hfsplus Filesystems
cat << EOF >> /etc/modprobe.d/CIS.conf

# CIS: 1.1.22 Disable Mounting of hfsplus Filesystems
install hfsplus /bin/true
EOF
etckeeper commit "CIS: 1.1.22 Disable Mounting of hfsplus Filesystems"

# CIS: 4.6.1 Disable DCCP
cat << EOF >> /etc/modprobe.d/CIS.conf

# CIS: 4.6.1 Disable DCCP
install dccp /bin/true
EOF
etckeeper commit " CIS: 4.6.1 Disable DCCP"

# CIS: 4.6.2 Disable SCTP
cat << EOF >> /etc/modprobe.d/CIS.conf

# CIS: 4.6.2 Disable SCTP
install sctp /bin/true
EOF
etckeeper commit " CIS: 4.6.2 Disable SCTP"

# CIS: 4.6.3 Disable RDS
cat << EOF >> /etc/modprobe.d/CIS.conf

# CIS: 4.6.3 Disable RDS
install rds /bin/true
EOF
etckeeper commit " CIS: 4.6.3 Disable RDS"

# CIS: 4.6.4 Disable TIPC"
cat << EOF >> /etc/modprobe.d/CIS.conf

# CIS: 4.6.4 Disable TIPC"
install tipc /bin/true
EOF
etckeeper commit "CIS: 4.6.4 Disable TIPC"

# CIS: 1.3.2 Ensure sudo commands use PTY
cat << EOF >> /etc/sudoers.d/00_cis

# CIS: 1.3.2 Ensure sudo commands use PTY
Defaults use_pty
EOF
etckeeper commit "CIS: 1.3.2 Ensure sudo commands use PTY"

# CIS: 1.3.3 Ensure sudo log file exists
cat << EOF >> /etc/sudoers.d/00_cis

# CIS: 1.3.3 Ensure sudo log file exists
Defaults logfile="/var/log/sudo.log"
EOF
etckeeper commit "CIS: 1.3.3 Ensure sudo log file exists"

# CIS: 1.5.1 Ensure permissions on bootloader config are configured
chown root:root /boot/grub2/grub.cfg
chmod 0600 /boot/grub2/grub.cfg
chown root:root /boot/grub2/grubenv
chmod 0600 /boot/grub2/grubenv

# CIS: 1.6.1 Ensure core dumps are restricted
cat << EOF >> /etc/security/limits.conf

# CIS: 1.6.1 Ensure core dumps are restricted
* hard core 0
EOF
cat << EOF >> /etc/sysctl.conf

# CIS: 1.6.1 Ensure core dumps are restricted
fs.suid_dumpable=0
EOF
cat << EOF >> /etc/systemd/coredump.conf
# CIS: 1.6.1 Ensure core dumps are restricted
Storage=none
ProcessSizeMax=0
EOF
etckeeper commit "CIS: 1.6.1 Ensure core dumps are restricted"

# CIS: 3.1 Set Daemon umask
cat << EOF >> /etc/sysconfig/init

# CIS: 3.1 Set Daemon umask
umask 027
EOF
etckeeper commit "CIS: 3.1 Set Daemon umask"

# CIS: 1.6.2 Ensure address space layout randomization (ASLR) is enabled
cat << EOF >> /etc/sysctl.conf

# CIS: 1.6.2 Ensure address space layout randomization (ASLR) is enabled
kernel.randomize_va_space = 2
EOF
etckeeper commit "CIS: 1.6.2 Ensure address space layout randomization (ASLR) is enabled"

# CIS: 2.2.1.2 Ensure chrony is configured (default is compliant)

# CIS: 4.1.1 Disable IP Forwarding
cat << EOF >> /etc/sysctl.conf

# CIS: 4.1.1 Disable IP Forwarding
net.ipv4.ip_forward=0
EOF
etckeeper commit "CIS: 4.1.1 Disable IP Forwarding"

# CIS: 4.1.2 Disable Send Packet Redirects
cat << EOF >> /etc/sysctl.conf

# CIS: 4.1.2 Disable Send Packet Redirects
net.ipv4.conf.all.send_redirects=0
net.ipv4.conf.default.send_redirects=0
EOF
etckeeper commit "CIS: 4.1.2 Disable Send Packet Redirects"

# CIS: 3.2.1 Ensure source routed packets are not accepted
cat << EOF >> /etc/sysctl.conf

# CIS: 3.2.1 Ensure source routed packets are not accepted
net.ipv4.conf.all.accept_source_route=0
net.ipv4.conf.default.accept_source_route=0
net.ipv6.conf.all.accept_source_route=0
net.ipv6.conf.default.accept_source_route=0
EOF
etckeeper commit "CIS: 3.2.1 Ensure source routed packets are not accepted"

# CIS: 4.2.2 Disable ICMP Redirect Acceptance
cat << EOF >> /etc/sysctl.conf

# CIS: 4.2.2 Disable ICMP Redirect Acceptance
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0
EOF
etckeeper commit "CIS: 4.2.2 Disable ICMP Redirect Acceptance"

# CIS: 4.2.3 Disable Secure ICMP Redirect Acceptance
cat << EOF >> /etc/sysctl.conf

# CIS: 4.2.3 Disable Secure ICMP Redirect Acceptance
net.ipv4.conf.all.secure_redirects=0
net.ipv4.conf.default.secure_redirects=0
EOF
etckeeper commit "CIS: 4.2.3 Disable Secure ICMP Redirect Acceptance"

# CIS: 4.2.4 Log Suspicious Packets
cat << EOF >> /etc/sysctl.conf

# CIS: 4.2.4 Log Suspicious Packets
net.ipv4.conf.all.log_martians=1
net.ipv4.conf.default.log_martians=1
EOF
etckeeper commit "CIS: 4.2.4 Log Suspicious Packets"

# CIS: 4.2.5 Enable Ignore Broadcast Requests
cat << EOF >> /etc/sysctl.conf

# CIS: 4.2.5 Enable Ignore Broadcast Requests
net.ipv4.icmp_echo_ignore_broadcasts=1
EOF
etckeeper commit "CIS: 4.2.5 Enable Ignore Broadcast Requests"

# CIS: 4.2.6 Enable Bad Error Message Protection
cat << EOF >> /etc/sysctl.conf

# CIS: 4.2.6 Enable Bad Error Message Protection
net.ipv4.icmp_ignore_bogus_error_responses=1
EOF
etckeeper commit "CIS: 4.2.6 Enable Bad Error Message Protection"

# CIS: 4.2.7 Enable RFC-recommended Source Route Validation
cat << EOF >> /etc/sysctl.conf

# CIS: 4.2.7 Enable RFC-recommended Source Route Validation
net.ipv4.conf.all.rp_filter=1
net.ipv4.conf.default.rp_filter=1
EOF
etckeeper commit "CIS: 4.2.7 Enable RFC-recommended Source Route Validation"

# CIS: 4.2.8 Enable TCP SYN Cookies
cat << EOF >> /etc/sysctl.conf

# CIS: 4.2.8 Enable TCP SYN Cookies
net.ipv4.tcp_syncookies = 1
EOF
etckeeper commit "CIS: 4.2.8 Enable TCP SYN Cookies"

# CIS: 4.4.1.1 Disable IPv6 Router Advertisements
cat << EOF >> /etc/sysctl.conf

# CIS: 4.4.1.1 Disable IPv6 Router Advertisements
net.ipv6.conf.all.accept_ra=0
net.ipv6.conf.default.accept_ra=0
EOF
etckeeper commit "CIS: 4.4.1.1 Disable IPv6 Router Advertisements"

# CIS: 4.4.1.2 Disable IPv6 Redirect Acceptance
cat << EOF >> /etc/sysctl.conf

# CIS: 4.4.1.2 Disable IPv6 Redirect Acceptance
net.ipv6.conf.all.accept_redirects=0
net.ipv6.conf.default.accept_redirects=0
EOF
etckeeper commit "CIS: 4.4.1.2 Disable IPv6 Redirect Acceptance"

# CIS: 4.4.2 Disable IPv6
cat << EOF >> /etc/sysctl.conf

# CIS: 4.4.2 Disable IPv6
net.ipv6.conf.all.disable_ipv6=1
EOF
etckeeper commit "CIS: 4.4.2 Disable IPv6"

# CIS: 4.5.2 Create /etc/hosts.allow
cat << EOF >> /etc/hosts.allow
# /etc/hosts.allow: list of hosts that are allowed to access the system
#                   see the manual pages hosts_access(5) and hosts_options(5)
#
# Example:  ALL: LOCAL @some_netgroup
#           ALL: .foobar.edu EXCEPT terminalserver.foobar.edu
EOF
etckeeper commit "CIS: 4.5.2 Create /etc/hosts.allow"

# CIS: 4.5.3 Verify Permissions on /etc/hosts.allow
chown root:root /etc/hosts.allow
chmod 644 /etc/hosts.allow
etckeeper commit "CIS: 4.5.3 Verify Permissions on /etc/hosts.allow"

# CIS: 4.5.4 Create /etc/hosts.deny
cat << EOF >> /etc/hosts.deny
# /etc/hosts.allow: list of hosts that are _not_ allowed to access the system
#                   see the manual pages hosts_access(5) and hosts_options(5)
#
# Example:  ALL: some.host.name, .some.domain
#           ALL: EXCEPT in.fingerd: other.host.name, .other.domain
#
# If you're going to protect the portmapper use the name "rpcbind" for the
# daemon name. See rpcbind(8) and rpc.mountd(8) for further information.
#
# The PARANOID wildcard matches any host whose name does not match its
# address.
#
# You may wish to enable this to ensure any programs that don't
# validate looked up hostnames still leave understandable logs.
# ALL: PARANOID
EOF
etckeeper commit "CIS: 4.5.2 Create /etc/hosts.allow"

# CIS: 4.5.5 Verify Permissions on /etc/hosts.deny
chown root:root /etc/hosts.deny
chmod 644 /etc/hosts.deny
etckeeper commit "CIS: 4.5.5 Verify Permissions on /etc/hosts.deny"

# CIS: 5.3 Configure logrotate
sed --follow-symlinks -i 's/^{/\/var\/log\/boot.log\n{/' /etc/logrotate.d/syslog
etckeeper commit "CIS: 5.3 Configure logrotate"

# CIS: 1.11 Ensure sytem-wide crypto policy is FUTURE or FIPS
sed --follow-symlinks -i 's/^DEFAULT$/\n# CIS: 1.11 Ensure sytem-wide crypto policy is FUTURE or FIPS\nFUTURE\n/' /etc/crypto-policies/config
etckeeper commit "CIS: 1.11 Ensure sytem-wide crypto policy is FUTURE or FIPS"

# CIS: 4.2.1.3 Ensure rsyslog default file permissions configured
sed --follow-symlinks -i '/RULES/i # CIS: 4.2.1.3 Ensure rsyslog default file permissions configure\n$FileOwner root\n$FileGroup adm\n$FileCreateMode 0640\n$DirCreateMode 0755\n$Umask 0022' /etc/rsyslog.conf
etckeeper commit "CIS: 4.2.1.3 Ensure rsyslog default file permissions configured"

# CIS: 4.2.2.1 Ensure journald is configured to send logs to rsyslog
sed --follow-symlinks -i 's/^#ForwardToSyslog=.*/ForwardToSyslog=yes/' /etc/systemd/journald.conf
etckeeper commit "CIS: 4.2.2.1 Ensure journald is configured to send logs to rsyslog"

# CIS: 4.2.2.2 Ensure journald is configured to compress large log files
sed --follow-symlinks -i 's/^#Compress=.*/Compress=yes/' /etc/systemd/journald.conf
etckeeper commit "CIS: 4.2.2.2 Ensure journald is configured to compress large log files"

# CIS: 4.2.2.3 Ensure journald is configured to write logsfiles to persistent disk
sed --follow-symlinks -i 's/^#Storage=.*/Storage=persistent/g' /etc/systemd/journald.conf
etckeeper commit "CIS: 4.2.2.3 Ensure journald is configured to write logsfiles to persistent disk"

# CIS: 4.2.3 Ensure permissions on all logfiles are configured
touch /var/log/messages /var/log/secure /var/log/maillog /var/log/cron /var/log/spooler /var/log/boot.log
chown root:root /var/log/messages /var/log/secure /var/log/maillog /var/log/cron /var/log/spooler /var/log/boot.log
chmod 0600 /var/log/messages /var/log/secure /var/log/maillog /var/log/cron /var/log/spooler /var/log/boot.log
sed --follow-symlinks -i 's#f /var/log/wtmp.*#f /var/log/wtmp 0640 root utmp -#' /usr/lib/tmpfiles.d/var.conf
sed --follow-symlinks -i 's#f /var/log/btmp.*#f /var/log/btmp 0640 root utmp -#' /usr/lib/tmpfiles.d/var.conf
sed --follow-symlinks -i 's#f /var/log/lastlog.*#f /var/log/lastlog 0640 root utmp -#' /usr/lib/tmpfiles.d/var.conf
sed --follow-symlinks -i '/^\[Service\]$/a UMask=027' /usr/lib/systemd/system/tuned.service
sed --follow-symlinks -i '/^\[Service\]$/a UMask=027' /usr/lib/systemd/system/rhsmcertd.service
systemctl daemon-reload
find /var/log -type f -exec chmod 0640 "{}" + -o -type d -exec chmod 0750 "{}" +
etckeeper commit "4.2.3 Ensure permissions on all logfiles are configured"

# CIS: 1.4.2 Ensure filesystem integrity is regularly checked
cat << EOF >> /etc/cron.d/aide
# CIS: 1.4.2 Ensure filesystem integrity is regularly checked
0 5 * * * root /usr/sbin/aide --check
EOF
etckeeper commit "CIS: 1.4.2 Ensure filesystem integrity is regularly checked"

# CIS: 5.2.1.2 Disable System on Audit Log Full
sed --follow-symlinks -i 's/^space_left_action .*/space_left_action = email/' /etc/audit/auditd.conf
sed --follow-symlinks -i 's/^action_mail_acct .*/action_mail_acct = root/' /etc/audit/auditd.conf
sed --follow-symlinks -i 's/^admin_space_left_action .*/admin_space_left_action = halt/' /etc/audit/auditd.conf
etckeeper commit "CIS: 5.2.1.2 Disable System on Audit Log Full"

# CIS: 5.2.1.3 Keep All Auditing Information
sed --follow-symlinks -i 's/^max_log_file_action .*/max_log_file_action = keep_logs/' /etc/audit/auditd.conf
etckeeper commit "CIS: 5.2.1.3 Keep All Auditing Information"

# CIS: 4.1.1.3 Ensure auditing for processes that start prior to auditd is enabled
sed --follow-symlinks -i 's/^\(GRUB_CMDLINE_LINUX=.*\)"/\1 audit=1"/' /etc/default/grub
grub2-mkconfig -o /boot/grub2/grub.cfg
etckeeper commit "CIS: 4.1.1.3 Ensure auditing for processes that start prior to auditd is enabled"

# CIS: 4.1.1.4 Ensure audit_backlog_limit is sufficient
sed --follow-symlinks -i 's/^\(GRUB_CMDLINE_LINUX=.*\)"/\1 audit_backlog_limit=8192"/' /etc/default/grub
grub2-mkconfig -o /boot/grub2/grub.cfg
etckeeper commit "CIS: 4.1.1.4 Ensure audit_backlog_limit is sufficient"

# CIS: 5.2.4 Record Events That Modify Date and Time Information 
cat << EOF >> /etc/audit/rules.d/audit.rules

# CIS: 5.2.4 Record Events That Modify Date and Time Information 
-a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
-a always,exit -F arch=b64 -S clock_settime -k time-change
-a always,exit -F arch=b32 -S clock_settime -k time-change
-w /etc/localtime -p wa -k time-change
EOF
etckeeper commit "CIS: 5.2.4 Record Events That Modify Date and Time Information"

# CIS: 5.2.5 Record Events That Modify User/Group Information
cat << EOF >> /etc/audit/rules.d/audit.rules

# CIS: 5.2.5 Record Events That Modify User/Group Information
-w /etc/group -p wa -k identity
-w /etc/passwd -p wa -k identity
-w /etc/gshadow -p wa -k identity
-w /etc/shadow -p wa -k identity
-w /etc/security/opasswd -p wa -k identity
EOF
etckeeper commit "CIS: 5.2.5 Record Events That Modify User/Group Information"

# CIS: 5.2.6 Record Events That Modify the System's Network Environment
cat << EOF >> /etc/audit/rules.d/audit.rules

# CIS: 5.2.6 Record Events That Modify the System's Network Environment
-a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
-a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
-w /etc/issue -p wa -k system-locale
-w /etc/issue.net -p wa -k system-locale
-w /etc/hosts -p wa -k system-locale
-w /etc/sysconfig/network -p wa -k system-locale
EOF
etckeeper commit "CIS: 5.2.6 Record Events That Modify the System's Network Environment"

# CIS: 5.2.7 Record Events That Modify the System's Mandatory Access Controls
cat << EOF >> /etc/audit/rules.d/audit.rules

# CIS: 4.1.7 Ensure events that modify the system's Mandatory Access Controls are collected
-w /etc/selinux/ -p wa -k MAC-policy
-w /usr/share/selinux/ -p wa -k MAC-policy 
EOF
etckeeper commit "CIS: 4.1.7 Ensure events that modify the system's Mandatory Access Controls are collected"

# CIS: 5.2.8 Collect Login and Logout Events
cat << EOF >> /etc/audit/rules.d/audit.rules

# CIS: 5.2.8 Collect Login and Logout Events
-w /var/log/faillog -p wa -k logins
-w /var/log/lastlog -p wa -k logins
-w /var/log/tallylog -p wa -k logins
EOF
etckeeper commit "CIS: 5.2.8 Collect Login and Logout Events"

# CIS: 5.2.9 Collect Session Initiation Information
cat << EOF >> /etc/audit/rules.d/audit.rules

# CIS: 4.1.5 Ensure session initiation information is collected
-w /var/run/utmp -p wa -k session
-w /var/log/wtmp -p wa -k logins
-w /var/log/btmp -p wa -k logins
EOF
etckeeper commit "CIS: 4.1.5 Ensure session initiation information is collected"

# CIS: 5.2.10 Collect Discretionary Access Control Permission Modification Events
cat << EOF >> /etc/audit/rules.d/audit.rules

# CIS: 4.1.9 Ensure discretionary access control permission modification events are collected
-a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
EOF
etckeeper commit "CIS: 4.1.9 Ensure discretionary access control permission modification events are collected"

# CIS: 5.2.11 Collect Unsuccessful Unauthorized Access Attempts to Files
cat << EOF >> /etc/audit/rules.d/audit.rules

# CIS: 5.2.11 Collect Unsuccessful Unauthorized Access Attempts to Files
-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
EOF
etckeeper commit "CIS: 5.2.11 Collect Unsuccessful Unauthorized Access Attempts to Files"

# CIS: 5.2.12 Collect Use of Privileged Commands
( echo ""
  echo "# CIS: 5.2.12 Collect Use of Privileged Commands"
  find / \( -perm -4000 -o -perm -2000 \) -type f | \
    awk '{print "-a always,exit -F path=" $1 " -F perm=x -F auid>=1000 -F auid!=4294967295 -k privileged" }'
) >> /etc/audit/rules.d/audit.rules
etckeeper commit "CIS: 5.2.12 Collect Use of Privileged Commands"

# CIS: 5.2.13 Collect Successful File System Mounts
cat << EOF >> /etc/audit/rules.d/audit.rules

# CIS: 5.2.13 Collect Successful File System Mounts
-a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts
-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts
EOF
etckeeper commit "CIS: 5.2.13 Collect Successful File System Mounts"

# CIS: 5.2.14 Collect File Deletion Events by User
cat << EOF >> /etc/audit/rules.d/audit.rules

# CIS: 5.2.14 Collect File Deletion Events by User
-a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete
-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete
EOF
etckeeper commit "CIS: 5.2.14 Collect File Deletion Events by User"

# CIS: 5.2.15 Collect Changes to System Administration Scope (sudoers)
cat << EOF >> /etc/audit/rules.d/audit.rules

# CIS: 4.1.3 Ensure changes to system administration scope (sudoers) is collected
-w /etc/sudoers -p wa -k scope
-w /etc/sudoers.d/ -p wa -k scope
EOF
etckeeper commit "CIS: 4.1.3 Ensure changes to system administration scope (sudoers) is collected"

# CIS: 5.2.16 Collect System Administrator Actions (sudolog) 
cat << EOF >> /etc/audit/rules.d/audit.rules

# CIS: 5.2.16 Collect System Administrator Actions (sudolog) 
-w /var/log/sudo.log -p wa -k actions
EOF
etckeeper commit "CIS: 5.2.16 Collect System Administrator Actions (sudolog)"

# CIS: 5.2.17 Collect Kernel Module Loading and Unloading
cat << EOF >> /etc/audit/rules.d/audit.rules

# CIS: 5.2.17 Collect Kernel Module Loading and Unloading
-w /sbin/insmod -p x -k modules
-w /sbin/rmmod -p x -k modules
-w /sbin/modprobe -p x -k modules
-a always,exit -F arch=b64 -S init_module -S delete_module -k modules
EOF
etckeeper commit "CIS: 5.2.17 Collect Kernel Module Loading and Unloading"

# CIS: 5.2.18 Make the Audit Configuration Immutable
cat << EOF >> /etc/audit/rules.d/audit.rules

# CIS: 5.2.18 Make the Audit Configuration Immutable
-e 2
EOF
etckeeper commit "CIS: 5.2.18 Make the Audit Configuration Immutable"

# CIS: 6.1.3 Set User/Group Owner and Permission on /etc/anacrontab
chown root:root /etc/anacrontab
chmod 0600 /etc/anacrontab
etckeeper commit "CIS: 6.1.3 Set User/Group Owner and Permission on /etc/anacrontab"

# CIS: 6.1.4 Set User/Group Owner and Permission on /etc/crontab 
chown root:root /etc/crontab
chmod 0600 /etc/crontab
etckeeper commit "CIS: 6.1.4 Set User/Group Owner and Permission on /etc/crontab"

# CIS: 6.1.5 Set User/Group Owner and Permission on /etc/cron.hourly
chown root:root /etc/cron.hourly
chmod 0600 /etc/cron.hourly
etckeeper commit "CIS: 6.1.5 Set User/Group Owner and Permission on /etc/cron.hourly"

# CIS: 6.1.6 Set User/Group Owner and Permission on /etc/cron.daily
chown root:root /etc/cron.daily
chmod 0600 /etc/cron.daily
etckeeper commit "CIS: 6.1.6 Set User/Group Owner and Permission on /etc/cron.daily"

# CIS: 6.1.7 Set User/Group Owner and Permission on /etc/cron.weekly
chown root:root /etc/cron.weekly
chmod 0600 /etc/cron.weekly
etckeeper commit "CIS: 6.1.7 Set User/Group Owner and Permission on /etc/cron.weekly"

# CIS: 6.1.8 Set User/Group Owner and Permission on /etc/cron.monthly
chown root:root /etc/cron.monthly
chmod 0600 /etc/cron.monthly
etckeeper commit "CIS: 6.1.8 Set User/Group Owner and Permission on /etc/cron.monthly"

# CIS: 6.1.9 Set User/Group Owner and Permission on /etc/cron.d
chown root:root /etc/cron.d
chmod 0700 /etc/cron.d
etckeeper commit "CIS: 6.1.9 Set User/Group Owner and Permission on /etc/cron.d"

# CIS: 6.1.10 Restrict at Daemon
rm /etc/at.deny
echo "root" > /etc/at.allow
chown root:root /etc/at.allow
chmod 0600 /etc/at.allow
etckeeper commit "CIS: 6.1.10 Restrict at Daemon"

# CIS: 6.1.11 Restrict at/cron to Authorized Users
rm /etc/cron.deny
echo "root" > /etc/cron.allow
chown root:root /etc/cron.allow
chmod 0600 /etc/cron.allow
etckeeper commit "CIS: 6.1.11 Restrict at/cron to Authorized Users"

# CIS: 6.3.1 Upgrade Password Hashing Algorithm to SHA-512
authconfig --passalgo=sha512 --update
etckeeper commit "CIS: 6.3.1 Upgrade Password Hashing Algorithm to SHA-512"

# CIS: 5.3.1 Create custom authselect profile
authselect create-profile custom-profile -b sssd --symlink-meta
etchkeeper commit "CIS: 5.3.1 Create custom authselect profile"

# CIS: 5.3.2 Select authselect profile
# CIS: 5.3.3 Ensure authselect includes with-faillock
authselect select custom/custom-profile with-sudo with-faillock without-nullok
etckeeper commit "CIS: 5.3.2 Select authselect profile & 5.3.3 Ensure authselect includes with-faillock"


# CIS: 5.4.1 Ensure password creation requirements are configured
sed --follow-symlinks -i 's/^.*minlen =.*/minlen = 14/' /etc/security/pwquality.conf
sed --follow-symlinks -i 's/^.*dcredit =.*/dcredit = -1/' /etc/security/pwquality.conf
sed --follow-symlinks -i 's/^.*ucredit =.*/ucredit = -1/' /etc/security/pwquality.conf
sed --follow-symlinks -i 's/^.*ocredit =.*/ocredit = -1/' /etc/security/pwquality.conf
sed --follow-symlinks -i 's/^.*lcredit =.*/lcredit = -1/' /etc/security/pwquality.conf
CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/)
for FN in system-auth password-auth
do
	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN
	[[ -z $(grep -E '^\s*password\s+requisite\s+pam_pwquality.so\s+.*enforce-for-root\s*.*$' $PTF) ]] && sed -ri 's/^\s*(password\s+requisite\s+pam_pwquality.so\s+)(.*)$/\1\2 enforce-for-root/' $PTF
	[[ -n $(grep -E '^\s*password\s+requisite\s+pam_pwquality.so\s+.*\s+retry=\S+\s*.*$' $PTF) ]] && sed -ri '/pwquality/s/retry=\S+/retry=3/' $PTF || sed -ri 's/^\s*(password\s+requisite\s+pam_pwquality.so\s+)(.*)$/\1\2 retry=3/' $PTF
done
authselect apply-changes
etckeeper commit "CIS: 5.4.1 Ensure password creation requirements are configured"

# CIS: 6.3.3 Set Lockout for Failed Password Attempts
sed --follow-symlinks -i 's/^\(auth.*env.so\)/\1\nauth        required      pam_faillock.so preauth audit silent deny=5 unlock_time=900/' /etc/pam.d/password-auth
sed --follow-symlinks -i 's/^auth.*pam_unix.so/auth        [success=1 default=bad] pam_unix.so/' /etc/pam.d/password-auth
sed --follow-symlinks -i 's/^\(auth.*pam_unix.so\)/\1\nauth        [default-die] pam_faillock.so authfail audit deny=5 unlock_time=900/' /etc/pam.d/password-auth
sed --follow-symlinks -i 's/^\(auth.*default-die.*\)/\1\nauth        sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900/' /etc/pam.d/password-auth
sed --follow-symlinks -i 's/^\(auth.*env.so\)/\1\nauth        required      pam_faillock.so preauth audit silent deny=5 unlock_time=900/' /etc/pam.d/system-auth
sed --follow-symlinks -i 's/^auth.*pam_unix.so/auth        [success=1 default=bad] pam_unix.so/' /etc/pam.d/system-auth
sed --follow-symlinks -i 's/^\(auth.*pam_unix.so\)/\1\nauth        [default-die] pam_faillock.so authfail audit deny=5 unlock_time=900/' /etc/pam.d/system-auth
sed --follow-symlinks -i 's/^\(auth.*default-die.*\)/\1\nauth        sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900/' /etc/pam.d/system-auth
etckeeper commit "CIS: 6.3.3 Set Lockout for Failed Password Attempts"

# CIS: 6.3.4 Limit Password Reuse
sed --follow-symlinks -i 's/^\(password.*pam_unix.*\)/\1 remember=5/' /etc/pam.d/system-auth
etckeeper commit "CIS: 6.3.4 Limit Password Reuse"

# CIS: 6.5 Restrict Access to the su Command
sed --follow-symlinks -i 's/^#\(auth.*required.*pam_wheel.*\)/\1/' /etc/pam.d/su
etckeeper commit "CIS: 6.5 Restrict Access to the su Command"

# CIS: 7.1.1 Set Password Expiration Days
sed --follow-symlinks -i 's/^PASS_MAX_DAYS.*/PASS_MAX_DAYS 90/' /etc/login.defs
for user in $(cut -f1 -d: /etc/passwd)
do
    chage --maxdays 90 $user
done
etckeeper commit "CIS: 7.1.1 Set Password Expiration Days"

# CIS: 7.1.2 Set Password Change Minimum Number of Days
sed --follow-symlinks -i 's/^PASS_MIN_DAYS.*/PASS_MIN_DAYS 7/' /etc/login.defs
for user in $(cut -f1 -d: /etc/passwd)
do
    chage --mindays 7 $user
done
etckeeper commit "CIS: 7.1.2 Set Password Change Minimum Number of Days"

# CIS: 7.1.3 Set Password Expiring Warning Days
sed --follow-symlinks -i 's/^PASS_WARN_AGE.*/PASS_WARN_AGE 7/' /etc/login.defs
for user in $(cut -f1 -d: /etc/passwd)
do
    chage --warndays 7 $user
done
etckeeper commit "CIS: 7.1.3 Set Password Expiring Warning Days"

# CIS: 5.5.3 Ensure default user shell timeout is 900 seconds or less
cat << EOF >> /etc/bashrc

# CIS: 5.5.3 Ensure default user shell timeout is 900 seconds or less
if [ "${TMOUT}" == "" ]
then
    TMOUT=900
    readonly TMOUT
    export TMOUT
fi
EOF
cat << EOF >> /etc/profile

# CIS: 5.5.3 Ensure default user shell timeout is 900 seconds or less
if [ "${TMOUT}" == "" ]
then
    TMOUT=900
    readonly TMOUT
    export TMOUT
fi
EOF
cat << EOF >> /etc/profile.d/cis.sh

# CIS: 5.5.3 Ensure default user shell timeout is 900 seconds or less
if [ "${TMOUT}" == "" ]
then
    TMOUT=900
    readonly TMOUT
    export TMOUT
fi
EOF
etckeeper commit "CIS: 5.5.3 Ensure default user shell timeout is 900 seconds or less"

# CIS: 5.5.5 Ensure default user umask is 027 or more restrictive
cat << EOF > /etc/profile.d/cis.sh
# CIS: 5.5.5 Ensure default user umask is 027 or more restrictive"
umask 077
EOF
sed --follow-symlinks -i 's/^\(\s.*\)\(umask\) .*/\1# CIS: 5.5.5 Ensure default user umask is 027 or more restrictive\n\1\2 077/g' /etc/profile
cat << EOF >> /etc/profile

# CIS: 5.5.5 Ensure default user umask is 027 or more restrictive"
umask 077
EOF
sed --follow-symlinks -i 's/^\(\s.*\)\(umask\) .*/\1# CIS: 5.5.5 Ensure default user umask is 027 or more restrictive\n\1\2 077/g' /etc/bashrc
cat << EOF >> /etc/bashrc

# CIS: 5.5.5 Ensure default user umask is 027 or more restrictive"
umask 077
EOF
etckeeper commit "CIS: 5.5.5 Ensure default user umask is 027 or more restrictive"

# CIS: 5.5.1.4 Ensure inactive password lock is 30 days or less
useradd -D -f 30
etckeeper commit "CIS: 5.5.1.4 Ensure inactive password lock is 30 days or less"

# CIS: 1.8.1.1 Ensure message of the day is configured properly
echo "" > /etc/motd
etckeeper commit "CIS: 1.8.1.1 Ensure message of the day is configured properly"

# CIS: 1.8.1.2 Ensure local login warning banner is configured properly
cat << EOF > /etc/issue
Authorized uses only.
All activity may be monitored and reported.

EOF
etckeeper commit "CIS: 1.8.1.2 Ensure local login warning banner is configured properly"

# CIS: 1.8.1.3 Ensure remote login warning banner is configured properly
cat << EOF > /etc/issue.net
Authorized uses only.
All activity may be monitored and reported.

EOF
etckeeper commit "CIS: 1.8.1.3 Ensure remote login warning banner is configured properly"

# CIS: 1.8.1.4 Ensure permissions on /etc/motd are configured
chown root:root /etc/motd
chmod 0644 /etc/motd
etckeeper commit "CIS: 1.8.1.4 Ensure permissions on /etc/motd are configured"

# CIS: 1.8.1.5 Ensure permissions on /etc/issue are configured
chown root:root /etc/issue
chmod 0644 /etc/issue
etckeeper commit "CIS: 1.8.1.5 Ensure permissions on /etc/issue are configured"

# CIS: 1.8.1.6 Ensure permissions on /etc/issue.net are configured
chown root:root /etc/issue.net
chmod 0644 /etc/issue.net
etckeeper commit "CIS: 1.8.1.6 Ensure permissions on /etc/issue.net are configured"

# CIS: 9.1.2 Verify Permissions on /etc/passwd
chmod 0644 /etc/passwd
etckeeper commit "CIS: 9.1.2 Verify Permissions on /etc/passwd"

# CIS: 9.1.3 Verify Permissions on /etc/shadow
chmod 0000 /etc/shadow
etckeeper commit "CIS: 9.1.3 Verify Permissions on /etc/shadow"

# CIS: 9.1.4 Verify Permissions on /etc/gshadow
chmod 0000 /etc/gshadow
etckeeper commit "CIS: 9.1.4 Verify Permissions on /etc/gshadow"

# CIS: 9.1.5 Verify Permissions on /etc/group
chmod 0644 /etc/group
etckeeper commit "CIS: 9.1.5 Verify Permissions on /etc/group"

# CIS: 9.1.6 Verify User/Group Ownership on /etc/passwd
chown root:root /etc/passwd
etckeeper commit "CIS: 9.1.6 Verify User/Group Ownership on /etc/passwd"

# CIS: 9.1.7 Verify User/Group Ownership on /etc/shadow
chown root:root /etc/shadow
etckeeper commit "CIS: 9.1.7 Verify User/Group Ownership on /etc/shadow"

# CIS: 9.1.8 Verify User/Group Ownership on /etc/gshadow
chown root:root /etc/gshadow
etckeeper commit "CIS: 9.1.8 Verify User/Group Ownership on /etc/gshadow"

# CIS: 9.1.9 Verify User/Group Ownership on /etc/group
chown root:root /etc/group
etckeeper commit "CIS: 9.1.9 Verify User/Group Ownership on /etc/group"

# CIS: 1.1.15 Ensure nodev option set on /dev/shm partition
# CIS: 1.1.16 Ensure nosuid option set on /dev/shm partition
# CIS: 1.1.17 Ensure noexec option set on /dev/shm partition
cat << EOF >> /etc/fstab
# CIS: 1.1.15 Ensure nodev option set on /dev/shm partition
# CIS: 1.1.16 Ensure nosuid option set on /dev/shm partition
# CIS: 1.1.17 Ensure noexec option set on /dev/shm partition
none                    /dev/shm                tmpfs   nodev,nosuid,noexec 0 0
EOF
etckeeper commit "CIS: 1.1.15-17 Ensure nodev,nosuid,noexec options set on /dev/shm partitions"

# CIS: 3.5 Ensure wireless interfaces are disabled
cat << EOF >> /etc/rc.local

# CIS: 3.5 Ensure wireless interfaces are disabled
nmcli radio all off
EOF
chmod +x /etc/rc.d/rc.local
etckeeper commit "CIS: 3.5 Ensure wireless interfaces are disabled"

# CIS: 6.2.20 Ensure all users' home directories exist
mkdir /var/lib/rngd
chown rngd:rngd /var/lib/rngd
chmod 2750 /var/lib/rngd
etckeeper commit "CIS: 6.2.20 Ensure all users' home directories exist"

#
# CIS Benchmark items that can't be implemented at this time or are not applicable
#

# CIS: 1.2.1 Ensure RedHat Subscription Manager connection is configured
# CIS: 1.5.3 Ensure authentication required for single user mode (OK: default is compliant)
# CIS: 1.10  Ensure system-wide crypto policy is not legacy (OK: default is compliant)

# CIS: 1.2.4 Verify Package Integrity Using RPM (OK: this is a fresh PXE build)
# CIS: 1.7 Use the Latest OS Release (UNKNOWN: this is a fresh PXE build)
# CIS: 4.3.1 Deactivate Wireless Interfaces (UNKOWN: don't know if this system has wireless)
# CIS: 5.1.5 Configure rsyslog to Send Logs to a Remote Log Host (NOT COMPLIANT: leaving for administrator action
# CIS: 5.1.6 Accept Remote rsyslog Messages Only on Designated Log Hosts (OK: default is compliant)
# CIS: 5.2.1.1 Configure Audit Log Storage Size (OK: default is compliant)
# CIS: 6.2.1 Set SSH Protocol to 2 (N/A: ssh not installed)
# CIS: 6.2.2 Set LogLevel to INFO (N/A: ssh not installed
# CIS: 6.2.3 Set Permissions on /etc/ssh/sshd_config (N/A: ssh not installed)
# CIS: 6.2.4 Disable SSH X11 Forwarding (N/A: ssh not installed)
# CIS: 6.2.5 Set SSH MaxAuthTries to 4 or Less (N/A: ssh not installed)
# CIS: 6.2.6 Set SSH IgnoreRhosts to Yes (N/A: ssh not installed)
# CIS: 6.2.7 Set SSH HostbasedAuthentication to No (N/A: ssh not installed)
# CIS: 6.2.8 Disable SSH Root Login (N/A: ssh not installed)
# CIS: 6.2.9 Set SSH PermitEmptyPasswords to No (N/A: ssh not installed)
# CIS: 6.2.10 Do Not Allow Users to Set Environment Options (N/A: ssh not installed)
# CIS: 6.2.11 Use Only Approved Cipher in Counter Mode (N/A: ssh not installed)
# CIS: 6.2.12 Set Idle Timeout Interval for User Login (N/A: ssh not installed)
# CIS: 6.2.13 Limit Access via SSH (N/A: ssh not installed)
# CIS: 6.2.14 Set SSH Banner (N/A: ssh not installed)
# CIS: 6.4 Restrict root Login to System Console (OK: default is compliant)
# CIS: 7.2 Disable System Accounts (OK: default is compliant)
# CIS: 7.3 Set Default Group for root Account (OK: default is compliant)
# CIS: 1.8.2 Ensure GDM login banner is configured (N/A: gnome not installed)
# CIS: 9.1.1 Verify System File Permissions (OK: default is compliant)
# CIS: 9.1.10 Find World Writable Files (OK: default is compliant)
# CIS: 9.1.11 Find Un-owned Files and Directories (OK: default is compliant)
# CIS: 9.1.12 Find Un-grouped Files and Directories (OK: default is compliant)
# CIS: 9.1.13 Find SUID System Executables (OK: default is compliant)
# CIS: 9.1.14 Find SGID System Executables (OK: default is compliant)
# CIS: 9.2.1 Ensure Password Fields are Not Empty (OK: default is compliant)
# CIS: 9.2.2 Verify No Legacy "+" Entries Exist in /etc/passwd File (OK: default is compliant)
# CIS: 9.2.3 Verify No Legacy "+" Entries Exist in /etc/shadow File (OK: default is compliant)
# CIS: 9.2.4 Verify No Legacy "+" Entries Exist in /etc/group File (OK: default is compliant)
# CIS: 9.2.5 Verify No UID 0 Accounts Exist Other Than root (OK: default is compliant)
# CIS: 9.2.6 Ensure root PATH Integrity (OK: default is compliant)
# CIS: 9.2.7 Check Permissions on User Home Directories (N/A: no users)
# CIS: 9.2.8 Check User Dot File Permissions (N/A: no users)
# CIS: 9.2.9 Check Permissions on User .netrc Files (N/A: no users)
# CIS: 9.2.10 Check for Presence of User .rhosts Files (N/A: no users)
# CIS: 9.2.11 Check Groups in /etc/passwd (OK: default is compliant)
# CIS: 9.2.13 Check User Home Directory Ownership (N/A: no users)
# CIS: 9.2.14 Check for Duplicate UIDs (OK: default is compliant)
# CIS: 9.2.15 Check for Duplicate GIDs (OK: default is compliant)
# CIS: 9.2.16 Check That Reserved UIDs Are Assigned to System Accounts (OK: default is compliant)
# CIS: 9.2.17 Check for Duplicate User Names (OK: default is compliant)
# CIS: 9.2.18 Check for Duplicate Group Names (OK: default is compliant)
# CIS: 9.2.19 Check for Presence of User .netrc Files (N/A: no users)
# CIS: 9.2.20 Check for Presence of User .forward Files (N/A: no users)

# All done!
echo "Kickstart load complete!!!" | ${LOGGER}
%end
