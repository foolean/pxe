#
# FILENAME:     kickstart-rocky-8.cfg
# AUTHOR:       Bennett Samowich <bsamowich@foolean.org>
# DATE:         2015-10-30
#
# DESCRIPTION:
#   Preseed configuration file for Rocky 8
#
#   This kickstart file will install a base Rocky system using a partitioning
#   layout based on the number and size of the disks.
#
#   PXE Init Arguments
#   ==================
#
#   raidtype    - The RAID type to build (e.g. none, 0, 1, 5, 6, 10)
#
#       If raidtype is set to 'none' (the default) then the
#       first disk will be formatted as a non-RAID, single disk.
#
#       NOTE: The /boot partition will always be RAID-1, unless single disk
#             is selected.  The number of disks and spares used in the /boot
#             partition will follow the 'raiddisks' and 'raidspares' options.
#
#   raiddisks   - The number of active disks to include in the volume
#
#   raidspares  - The number of spare disks to include in the volume
#
#   The installer itself will throw the error If the requested number of
#   disks, spares, and raid type can not be fullfilled.
#
#   NOTE: Rocky 8 uses biosdevname which means that eth0 will instead be
#         something like enp1s0f0.  If you want to restore "normal" ethX
#         behavior then add biosdevname=0 net.ifnames=0 to the APPEND line.
#
#   Partition Sizing (smallest disk < 40G)
#   =======================================
#   Swap        384(MB)
#   /           800(MB)
#   /boot       512(MB)
#   /home       32(MB)      [ nodev ]
#   /var        512(MB)
#   /usr        1280(MB)
#   /usr/local  256(MB)
#   /tmp        256(MB)     [ nodev, nosuid, noexec ]
#   /var/tmp    256(MB)     [ nodev, nosuid, noexec ]
#   /var/log    1024(MB)
#
#   Partition Sizing (smallest disk >= 40G)
#   =======================================
#   Swap        4096(MB)
#   /           896(MB)
#   /boot       512(MB)
#   /home       4096(MB)    [ nodev ]
#   /var        7168(MB)
#   /usr        4096(MB)
#   /usr/local  512(MB)
#   /tmp        4096(MB)    [ nodev, nosuid, noexec ]
#   /var/tmp    4096(MB)    [ nodev, nosuid, noexec ]
#   /var/log    8192(MB)
#
#   Initial Passwords
#   =================
#
#   The initial root and boot menu password is 'changeme'.
#
#   You will be prompted to change the root password at first login.
#
#   URL
#   ===
#
#   This kickstart assumes that the contents of the Rocky 8 DVD will
#   be served from the PXE server itself.
#
##############################################################################

# Set the language to US english
lang en_US.UTF-8

# Sets system keyboard type
keyboard us

# Set the time zone to EST
timezone --utc America/New_York

# Set the default root password.  This can also be encrypted.
# To pre-encrypt the password use the openssl command:
#     openssl passwd -1 <PASSWORD>
#rootpw --iscrypted $1$CfRZs.3k$n7vrqs23hSkcQximEHgqg/
rootpw changeme

# Install in text mode
text

# Set the boot loader options.
# We may also set a boot loader password.
# To pre-crypt the password use the openssl command:
#     openssl passwd -1 <PASSWORD>
# bootloader --location=mbr --append hdb=ide-scsi --md5pass=<MD5PASS>
bootloader --location=mbr --append hdb=ide-scsi

# Install Linux, don't upgrade
install

# Skip the X Windows configuration
skipx

# Configure network settings
# Examples:
#   DHCP:   network --device=eth0 --bootproto=dhcp --noipv6
#   STATIC: network --device eth0 --bootproto static --ip <IP> \
#                   --netmask <NETMASK> --gateway <GATEWAY>    \
#                   --nameserver <DNS1>,<DNS2>,<DNS3> --noipv6 \
#                   --hostname <HOSTNAME>
network --bootproto=dhcp

# Install from our URL
url --url http://pxe/mirror/rocky/8/x86_64/
repo --name AppStream --baseurl http://dl.rockylinux.org/pub/rocky/8/AppStream/x86_64/os/
repo --name BaseOS    --baseurl http://dl.rockylinux.org/pub/rocky/8/BaseOS/x86_64/os/

# Configure how passwords are stored
authconfig --enableshadow --passalgo=sha512

# Clear all of the existing partitions from the disk adn make new ones
# (Note: This layout requires a minimum of a 5GB drive)
# The layout is comprised of recommendations from various security
# related resources.
zerombr
clearpart --all --initlabel

# The partitioning layout will be assembled in the %pre section
%include /tmp/partitions.ks

# SELinux
# Options are 'enforcing', 'permissive'
selinux --permissive

# Reboot the machine when done.
# (It's up to you to remove the boot media)
reboot

# Packages that we will start with.
%packages
@core --nodefaults
git
postfix
redhat-lsb-core
# Packages not to install
#-cups
#-cups-libs
#-dracut-network
#-NetworkManager*
#-postfix
-aic94xx-firmware*
-alsa-firmware*
-alsa-plugins*
-alsa-tools*
-alsa-ucm*
-alsa-utils*
-biosdevname
-btrfs-progs*
-iprutils
-ivtv*
-iwl*firmware
-libertas*
-openssh-server
-plymouth*
-rsh
-rsh-server
-talk
-talk-server
-telnet
-telnet-server
-tftp
-tftp-server
-xinetd
-xort-x11*
-ypbind
-ypserv
%end

# The following commands are executed at the beginning of the installation
# process by /bin/sh.
%pre
#!/bin/sh

# Get any kernel options and convert them to environment variables
set -- $(cat /proc/cmdline | sed -e 's/net\.ifnames/net_ifnames/')
for I in $*; do case "$I" in *=*) eval $I;; esac; done

# Create a file that contains the kickstart URL as well as git,
# sha1, and sha256 hashes into the resulting image.  The purpose
# of which is to provide the ability to show when and how the
# system was built.
cat << EOF >> /tmp/tag-install.sh
#!/bin/sh

while [ ! -d /mnt/sysimage/etc ]
do
    sleep 5
done
(   echo "date:    $(date)"
    echo ""
    echo "ks:      ${ks}"
    echo "git-sha: $((printf "blob $(ls -l /run/install/ks.cfg | awk '{print $5}')\0"; cat /run/install/ks.cfg) | sha1sum | awk '{print $1}')"
    echo "sha1:    $(sha1sum /run/install/ks.cfg | awk '{print $1}')"
    echo "sha256:  $(sha256sum /run/install/ks.cfg | awk '{print $1}')"
) > /mnt/sysimage/etc/build-info
chmod 0000 /mnt/sysimage/etc/build-info
EOF
chmod 700 /tmp/tag-install.sh
/bin/sh /tmp/tag-install.sh > /dev/null 2>&1 < /dev/null &

# Create a repo entry from the kickstart URL
cat << EOF > /tmp/configure-repo.sh
#!/bin/sh

while [ ! -d /mnt/sysimage/etc/yum.repos.d ]
do
    sleep 5
done
KS_URL="$(grep "^url" /run/install/ks.cfg | cut -f3- -d\ )"
REPO_FILE="/mnt/sysimage/etc/yum.repos.d/rhel-kickstart-url.repo"
echo "[kickstart-url-appstream]" > "\${REPO_FILE}"
echo "name=Red Hat Enterprise Linux 8 Kickstart URL - AppStream" >> "\${REPO_FILE}"
echo "baseurl=\${KS_URL}AppStream/" >> "\${REPO_FILE}"
echo "enabled=1" >> "\${REPO_FILE}"
echo "" >> "\${REPO_FILE}"
echo "[kickstart-url-baseos]" >> "\${REPO_FILE}"
echo "name=Red Hat Enterprise Linux 8 Kickstart URL - BaseOS" >> "\${REPO_FILE}"
echo "baseurl=\${KS_URL}BaseOS/" >> "\${REPO_FILE}"
echo "enabled=1" >> "\${REPO_FILE}"
EOF
/bin/sh /tmp/configure-repo.sh > /dev/null 2>&1 < /dev/null &

# The Rocky 8 installer based script 'list-harddrives' also shows any
# pre-existing linux-raid partitions as part of the disk list.  It is
# for that reason that we resort to parsing the output of lsblk.  The
# lsblk command doesn't exist in Rocky 6 and list-harddrives behaves
# correctly so we'll only actually use lsblk when it exists.
#
# Note: The lsblk comand in Rocky 8 also shows fd0 and a ramdisk for
#       swap.  We'll still use lsblk to identify disks but also need
#       to weed out this extra cruft.
if [ -f "/usr/bin/lsblk" ]; then
    LIST_HARDDRIVES="lsblk | grep disk | grep -v \"^zram\" | grep -v \"^fd\" | awk '{print \$1}'"
else
    LIST_HARDDRIVES="list-harddrives"
fi

# Default partition sizes
SWAP_SZ=4096
LV01_SZ=896
LV02_SZ=4096
LV03_SZ=7168
LV04_SZ=4096
LV05_SZ=512
LV06_SZ=4096
LV07_SZ=4096
LV08_SZ=8192

# Get the smallest disk size
SMALLEST_DISK=$(                      \
    ( eval ${LIST_HARDDRIVES}       | \
        awk '{print $1}'            | \
        while read DISK; do           \
            fdisk -l "/dev/${DISK}" | \
              grep "^Disk .* bytes" | \
              cut -f5 -d\ ;
        done                          \
    ) | sort -un | head -n1           \
);

# Use a smaller layout if the disk is smaller than 40G
if [ ${SMALLEST_DISK} -lt 40000000000 ]; then
    SWAP_SZ=384;
    LV01_SZ=800;
    LV02_SZ=32;
    LV03_SZ=512;
    LV04_SZ=1280;
    LV05_SZ=256;
    LV06_SZ=256;
    LV07_SZ=256;
    LV08_SZ=1024;
fi

# A few more variables
DISKS=$(eval ${LIST_HARDDRIVES} | wc -l);
RAID_TYPE="none"
RAID_DISKS="${DISKS}"
RAID_SPARES="0";

if [ "${raidtype}" == "none" ]; then
    raiddisks=1;
fi
if [ "${raidtype}" != "" ]; then
    RAID_TYPE="${raidtype}"
fi
if [ "${raiddisks}" != "" ]; then
    RAID_DISKS="${raiddisks}"
fi
if [ "${raidspares}" != "" ]; then
    RAID_SPARES="${raidspares}"
fi
RAID_TOTAL=$(( ${RAID_DISKS} + ${RAID_SPARES} ))

# Build our partitioning layout
if [ "${RAID_TOTAL}" == "1" ]; then
    DISK=$(eval ${LIST_HARDDRIVES} | awk '{print $1}' | head -n ${RAID_TOTAL})
    cat << EOF >> /tmp/partitions.ks
part /boot --fstype=ext4 --size=512 --ondisk ${DISK}
part pv.01 --grow        --size=1   --ondisk ${DISK}
EOF
else
    INDEX=1
    RAID_LIST0=""
    RAID_LIST1=""
    for DISK in $(eval ${LIST_HARDDRIVES} | awk '{print $1}' | head -n ${RAID_TOTAL}); do
        RAID_LIST0="${RAID_LIST0} raid.0${INDEX}"
        RAID_LIST1="${RAID_LIST1} raid.1${INDEX}"
        cat << EOF >> /tmp/partitions.ks
part raid.0${INDEX} --size=512        --ondisk ${DISK}
part raid.1${INDEX} --size=1   --grow --ondisk ${DISK}
EOF
        INDEX=$(( ${INDEX} + 1 ))
    done
    cat << EOF >> /tmp/partitions.ks
raid /boot --fstype=ext4 --level=RAID1 --spares=${RAID_SPARES} --device=md0 ${RAID_LIST0}
raid pv.01               --level=RAID${RAID_TYPE} --spares=${RAID_SPARES} --device=md1 ${RAID_LIST1}
EOF
fi

cat << EOF >> /tmp/partitions.ks

volgroup vg0 pv.01
logvol swap         --fstype=ext4 --vgname=vg0 --size=${SWAP_SZ} --name=swap
logvol /            --fstype=ext4 --vgname=vg0 --size=${LV01_SZ} --name=lv01
logvol /home        --fstype=ext4 --vgname=vg0 --size=${LV02_SZ} --name=lv02 --fsoptions="nodev"
logvol /var         --fstype=ext4 --vgname=vg0 --size=${LV03_SZ} --name=lv03
logvol /usr         --fstype=ext4 --vgname=vg0 --size=${LV04_SZ} --name=lv04
logvol /usr/local   --fstype=ext4 --vgname=vg0 --size=${LV05_SZ} --name=lv05
logvol /tmp         --fstype=ext4 --vgname=vg0 --size=${LV06_SZ} --name=lv06 --fsoptions="nodev,nosuid,noexec"
logvol /var/tmp     --fstype=ext4 --vgname=vg0 --size=${LV07_SZ} --name=lv07 --fsoptions="nodev,nosuid,noexec"
logvol /var/log     --fstype=ext4 --vgname=vg0 --size=${LV08_SZ} --name=lv08
EOF
%end

# The following commands are executed at the end of the installation
# process by /bin/sh while you are chrooted into the new system.  This
# allows you to add user accounts, turn on or off autobooted software,
# etc..
%post


# Proxy to use for YUM
YUMPROXYSVR=""
YUMPROXYUSER=""
YUMPROXYPASS=""

# Turn off packages that we don't want running
SERVICES="xfs acpidatd autofs cpuspeed cups gpm haldaemon isdn mdmonitor netfs nfslock openibd pcmcia portmap rawdevices rpcgssd rpcidmapd smartd xinetd"
for SERVICE in ${SERVICES}
do
   echo "disabling ${SERVICE}"
   chkconfig ${SERVICE} off
done

# Import GPG keys
rpm --import `find /usr/share/doc -name '*GPG*' -type f | grep -v -i redhat | \
        head -1` 2> /dev/null
rpm --import `find /usr/share/doc -name '*GPG*' -type f | grep -i redhat | \
        head -1` 2> /dev/null
rpm --import `find /etc/pki/rpm-gpg -name '*GPG*' -type f` 2>/dev/null

# Set up the EPEL repository
rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm

# Set up the Puppet v6 repository
rpm -Uvh https://yum.puppetlabs.com/puppet6-release-el-8.noarch.rpm

# Install msmtp
yum install -y msmtp

# Install puppet
yum install -y puppet

# Install etckeeper
yum install -y etckeeper
if [ -f /etc/etckeeper/etckeeper.conf ]
then
    cp /etc/etckeeper/etckeeper.conf /etc/etckeeper/etckeeper.conf.orig
    ( cat /etc/etckeeper/etckeeper.conf | \
      sed -e 's/VCS=\"hg\"/#VCS=\"hg\"/'  \
          -e 's/VCS=\"#git\"/VCS=\"git\"/'
    ) > /etc/etckeeper/etckeeper.conf.new
    mv /etc/etckeeper/etckeeper.conf.new /etc/etckeeper/etckeeper.conf
    etckeeper init
    etckeeper commit "Initial commit of base system"
fi

# Configure mstmp
cp /usr/share/doc/msmtp/msmtprc-system.example /etc/msmtprc
etckeeper commit "Initial sample msmtp configuration"

# Remove duplicate kernels
for i in kernel kernel-smp
do
   NONCE=`rpm -q $i 2> /dev/null | wc -l | awk '{print $1}'`
   export CNT=`echo " 0${NONCE} + 0" | bc`

   echo "cnt: $CNT pre while $NONCE "
   sleep 5

   while [ $CNT -gt 1 ]
   do
      NONCE=`rpm -q $i --last | awk '{print $1}' | tail -1`

      echo "kernel: $NONCE "
      sleep 5

      rpm -e $NONCE  && echo "  removed extra $NONCE kernel"

      NONCE=`rpm -q $i 2> /dev/null | wc -l | awk '{print $1}'`
      export CNT=`echo " 0${NONCE} + 0" | bc`

      echo "cnt: $CNT in while $NONCE "
      sleep 5
   done
done

# Attempt package updates
echo "Looking for updates via 'yum'"
yum -d 0 -e 0 -t -y update

# Free up the yum cached files
echo "Cleaning up yum cached files"
yum -y clean all

# Force root password change
echo "Forcing root password change"
chage -d 0 root
etckeeper commit "Force root to change password"

# Set the initial Puppet configuration
cp /etc/puppet/puppet.conf /etc/puppet/puppet.conf.orig
cat << EOF > /etc/puppet/puppet.conf
[main]
logdir=/var/log/puppet
vardir=/var/lib/puppet
manifestdir=/var/lib/puppet/manifests
ssldir=/var/lib/puppet/ssl
rundir=/var/run/puppet
factpath=\$vardir/lib/facter
runinterval=315569260
server=puppet
ca_server=puppet
environment=production
summarize=true
show_diff = true
listen=false
EOF
etckeeper commit "Set basic puppet.conf"

# All done!
echo "Kickstart load complete!!!"
%end
